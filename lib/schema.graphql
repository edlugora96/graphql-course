"Validate the level pf the author"
enum Level {
  basic
  professional
}

union GlobalSearch = Author | Anime

interface Base {
  _id: ID!
  name: String!
  description: String
}

type Author implements Base {
  _id: ID!
  name: String!
  description: String
  born: Int
  level: Level
}

type Anime implements Base {
  _id: ID!
  name: String!
  description: String
  authors: [Author]
}

type Query {
  "Return the animes"
  getAnimes: [Base]
  "Return the authors"
  getAuthors: [Base]
  "Return a anime"
  getAnime(name: String!): Base
  "Return a anime"
  getAuthor(name: String!): Base
  "Excecute a global search"
  searchItems(keyword: String!): [GlobalSearch]
}

input AnimeInput {
  name: String!
  description: String!
}

input AnimeEditInput {
  name: String
  description: String
}

input AuthorInput {
  name: String!
  born: Int!
  description: String
  level: Level
}

type Mutation {
  "Create a anime"
  createAnime(input: AnimeInput!): Base
  "Edit a anime"
  editAnime(name: String!, input: AnimeEditInput!): Base
  "Add a author of the anime"
  addAuthor(animeId: ID!, authorId: ID!): Base
  "Cretae a author"
  createAuthor(input: AuthorInput!): Base
}
